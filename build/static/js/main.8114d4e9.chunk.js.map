{"version":3,"sources":["GoodTable.js","App.js","serviceWorker.js","index.js"],"names":["GoodTable","state","style","ButtonMinusColumn","ButtonMinusRow","rowsInit","_this","props","initialHeight","columnsInit","initialWidth","currentRowNum","currentColumnNum","timerHideButtons","TableInit","width","height","react_default","a","createElement","rows","i","push","key","CellsInit","RowsInit","columns","ShowButtons","MinusColumnOffset","MinusRowOffset","currentTable","document","getElementsByClassName","className","length","cells","setState","visibility","top","left","AddColumn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","insertCell","err","return","AddRow","cellsInRows","insertRow","lastRow","MinusColumn","minusColumnBtn","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","deleteCell","offsetLeft","HideMinusButtons","MinusRow","minusRowBtn","deleteRow","offsetTop","TableOnMouseOverHandler","event","target","ClearTimerHideButtons","tagName","parentNode","rowIndex","cellIndex","SetTimerHideButtons","setTimeout","clearTimeout","_this2","this","onClick","onMouseOver","onMouseOut","bind","Component","App","Fragment","src_GoodTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8114d4e9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass GoodTable extends Component {\r\n    state = {\r\n        style: {\r\n            ButtonMinusColumn: {},\r\n            ButtonMinusRow: {}\r\n        },\r\n        rowsInit: this.props.initialHeight,\r\n        columnsInit: this.props.initialWidth,\r\n\r\n        currentRowNum: 0,\r\n        currentColumnNum: 0,\r\n\r\n        timerHideButtons: {}\r\n    }\r\n\r\n    TableInit = (width, height) => {\r\n        return (\r\n            <tbody>\r\n                {RowsInit(width, height)}\r\n            </tbody>\r\n        )\r\n\r\n        function RowsInit(width, height) {\r\n            let rows = [];\r\n\r\n            for(let i = 0; i < height; i++) {\r\n                rows.push(\r\n                    <tr key={i}>\r\n                        {CellsInit(width)}\r\n                    </tr>\r\n                )\r\n            }\r\n\r\n            return rows;\r\n        }\r\n\r\n        function CellsInit(width) {\r\n            let columns = [];\r\n\r\n            for(let i = 0; i < width; i++) {\r\n                columns.push(\r\n                    <td key={i}></td>\r\n                )\r\n            }\r\n\r\n            return columns;\r\n        }\r\n    }\r\n\r\n    ShowButtons = (MinusColumnOffset, MinusRowOffset) => {\r\n        const currentTable = document.getElementsByClassName(this.props.className)[0];\r\n\r\n        if(currentTable.rows.length !== 1 && currentTable.rows[0].cells.length !== 1) {\r\n            this.setState({\r\n                style: {\r\n                    ButtonMinusRow: {\r\n                        visibility: 'visible',\r\n                        top: MinusRowOffset\r\n                    },\r\n                    ButtonMinusColumn: {\r\n                        visibility: 'visible',\r\n                        left: MinusColumnOffset\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        else if (currentTable.rows.length !== 1) {\r\n            this.setState({\r\n                style: {\r\n                    ButtonMinusRow: {\r\n                        visibility: 'visible',\r\n                        top: MinusRowOffset\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        else if (currentTable.rows[0].cells.length !== 1) {\r\n            this.setState({\r\n                style: {\r\n                    ButtonMinusColumn: {\r\n                        visibility: 'visible',\r\n                        left: MinusColumnOffset\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    AddColumn = () => {\r\n        let currentTable = document.getElementsByClassName(this.props.className)[0];\r\n\r\n        for(let row of currentTable.rows) {\r\n            row.insertCell(-1);\r\n        }\r\n    }\r\n\r\n    AddRow = () => {\r\n        let currentTable = document.getElementsByClassName(this.props.className)[0];\r\n        let cellsInRows = currentTable.rows[0].cells.length;\r\n\r\n        currentTable.insertRow(-1);\r\n\r\n        let lastRow = currentTable.rows[currentTable.rows.length - 1];\r\n\r\n        for(let i = 0; i < cellsInRows; i++) {\r\n            lastRow.insertCell(i);\r\n        }\r\n    }\r\n\r\n    MinusColumn = () => {\r\n        let currentTable = document.getElementsByClassName(this.props.className)[0];\r\n        let minusColumnBtn = document.getElementsByClassName('BtnTop')[0];\r\n\r\n        if(currentTable.rows[0].cells.length !== 1) {\r\n            let rows = currentTable.rows;\r\n\r\n            for(let row of rows) {\r\n                row.deleteCell(this.state.currentColumnNum);\r\n            }\r\n\r\n            minusColumnBtn.style.left = currentTable.rows[0].cells[currentTable.rows[0].cells.length - 1].offsetLeft + 'px';\r\n\r\n            this.HideMinusButtons();\r\n        }\r\n    }\r\n\r\n    MinusRow = () => {\r\n        let currentTable = document.getElementsByClassName(this.props.className)[0];\r\n        let minusRowBtn = document.getElementsByClassName('BtnLeft')[0];\r\n\r\n        if(currentTable.rows.length !== 1) {\r\n            currentTable.deleteRow(this.state.currentRowNum);\r\n            \r\n            minusRowBtn.style.top = currentTable.rows[currentTable.rows.length - 1].offsetTop + 'px';\r\n\r\n            this.HideMinusButtons();\r\n        }\r\n    }\r\n\r\n    TableOnMouseOverHandler = (event) => {\r\n        let target = event.target;\r\n\r\n        this.ClearTimerHideButtons();\r\n\r\n        if(target.tagName !== 'TD') return;\r\n\r\n        this.ShowButtons(target.offsetLeft, target.offsetTop);\r\n\r\n        this.setState({\r\n            currentRowNum: target.parentNode.rowIndex,\r\n            currentColumnNum: target.cellIndex\r\n        })\r\n\r\n        // this.ShowButtons();\r\n    }\r\n\r\n    HideMinusButtons = () => {\r\n        this.setState({\r\n            style: {\r\n                ButtonMinusColumn: {\r\n                    visibility: 'hidden'\r\n                },\r\n                ButtonMinusRow: {\r\n                    visibility: 'hidden'\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // ShowMinusButtons = () => {\r\n    //     const currentTable = document.getElementsByClassName(this.props.className)[0];\r\n    //     const btnMinusColumn = document.getElementsByClassName('BtnTop')[0];\r\n    //     const btnMinusRow = document.getElementsByClassName('BtnLeft')[0];\r\n\r\n    //     if (currentTable.rows.length !== 1) {\r\n    //         btnMinusRow.style.visibility = 'visible';\r\n    //     }\r\n    //     if (currentTable.rows[0].cells.length !== 1) {\r\n    //         btnMinusColumn.style.visibility = 'visible';\r\n    //     }\r\n    // }\r\n\r\n    SetTimerHideButtons = () => {\r\n        this.setState({\r\n            timerHideButtons: setTimeout(this.HideMinusButtons, 500)\r\n        })    \r\n    }\r\n\r\n    ClearTimerHideButtons = () => {\r\n        clearTimeout(this.state.timerHideButtons);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Module\">\r\n                <div className=\"OperationButton ButtonMinus BtnTop\" \r\n                    style={this.state.style.ButtonMinusColumn}\r\n                    onClick={() => this.MinusColumn()}\r\n                    onMouseOver={() => this.ClearTimerHideButtons()}\r\n                    onMouseOut={() => this.SetTimerHideButtons()}><span>-</span>\r\n                </div>\r\n\r\n                <div className=\"OperationButton ButtonMinus BtnLeft\" \r\n                    style={this.state.style.ButtonMinusRow}\r\n                    onClick={() => this.MinusRow()}\r\n                    onMouseOver={() => this.ClearTimerHideButtons()}\r\n                    onMouseOut={() => this.SetTimerHideButtons()}><span>-</span>\r\n                </div>\r\n\r\n                <div className=\"OperationButton ButtonPlus BtnBottom\" \r\n                    onClick={() => this.AddRow()} \r\n                    style={this.state.style}><span>+</span>\r\n                </div>\r\n\r\n                <div className=\"OperationButton ButtonPlus BtnRight\" \r\n                    onClick={() => this.AddColumn()} \r\n                    style={this.state.style}><span>+</span>\r\n                </div>\r\n\r\n                <table className={this.props.className}\r\n                    onMouseOver={this.TableOnMouseOverHandler.bind(this)}\r\n                    onMouseOut={() => this.SetTimerHideButtons()}>\r\n                        {this.TableInit(this.state.columnsInit, this.state.rowsInit)}\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoodTable;","import React, {Component} from 'react';\nimport './App.css';\nimport GoodTable from './GoodTable';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <GoodTable className='GT1' initialWidth={4} initialHeight={4}></GoodTable>\n        <GoodTable className='GT2' initialWidth={4} initialHeight={4}></GoodTable>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}